definitions:
  dto.AuthResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  dto.BookRequest:
    properties:
      author_id:
        type: string
      cover_url:
        type: string
      description:
        type: string
      file_url:
        type: string
      genre:
        type: string
      isbn:
        type: string
      language:
        type: string
      page_count:
        type: integer
      publish_year:
        type: integer
      title:
        type: string
    type: object
  dto.BookResponse:
    properties:
      author_id:
        type: string
      cover_url:
        type: string
      description:
        type: string
      file_url:
        type: string
      genre:
        type: string
      id:
        type: string
      isbn:
        type: string
      language:
        type: string
      page_count:
        type: integer
      publish_year:
        type: integer
      title:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: string
        type: string
    required:
    - email
    - password
    type: object
  dto.PatchUserRequsest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API documentation
  title: "API \U0001F5A5\U0001F680"
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен
      parameters:
      - description: Учетные данные
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход в систему
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Ошибка валидации
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверные учетные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход в систему
      tags:
      - auth
  /api/auth/logout:
    post:
      description: Удаляет токен и завершает сессию пользователя
      responses:
        "200":
          description: Успешный выход из системы
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Выход из системы
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка валидации или пользователь уже существует
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация нового пользователя
      tags:
      - auth
  /api/books:
    get:
      consumes:
      - application/json
      description: Возвращает список всех книг
      produces:
      - application/json
      responses:
        "200":
          description: Список книг
          schema:
            items:
              $ref: '#/definitions/dto.BookResponse'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение всех книг
      tags:
      - Book
    post:
      consumes:
      - application/json
      description: Создаёт новую книгу
      parameters:
      - description: Данные книг
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание книги
      tags:
      - Book
  /api/books/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о книги по указанному ID
      parameters:
      - description: ID книги
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Книга найден
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Книга не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение книги по ID
      tags:
      - Book
  /api/books/genre/{genre}:
    get:
      consumes:
      - application/json
      description: Возвращает список книг по указанному жанру
      parameters:
      - description: Жанр книги
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список книг
          schema:
            items:
              $ref: '#/definitions/dto.BookResponse'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Поиск книг по жанру
      tags:
      - Book
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь найден
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение пользователя по ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Полностью обновляет данные пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.PatchUserRequsest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь обновлен
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Полное обновление пользователя
      tags:
      - users
  /api/users/all:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение всех пользователей
      tags:
      - users
  /api/users/profile:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о профиле текущего аутентифицированного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Профиль пользователя
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение профиля пользователя
      tags:
      - users
swagger: "2.0"
